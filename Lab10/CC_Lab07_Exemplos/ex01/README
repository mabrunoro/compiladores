
Este exemplo utiliza uma gramática de expressões aritméticas como
já vista anteriormente.

Ao digitar 'make' é gerado um arquivo 'parser.output'. Isso acontece pois o
bison foi executado com a opção '-v' (verbose). Neste arquivo é possível
ver o autômato de itens LR(1) gerado pelo bison e acompanhar todas as ações
definidas pela gramática. Essas informações são muito úteis para debugar
eventuais erros na gramática.

Além disso, é possível ativar o modo de debug do bison, que exibe na tela
todas as ações realizadas durante o parse. Veja as opções indicadas no arquivo
'parser.y'.

Executando como no exemplo abaixo, obtemos o trace do processo de parse.

$ ./parser <<< "2+3"
Starting parse
Entering state 0
Reading a token: Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 1
Reducing stack by rule 2 (line 31):
   $1 = token NUMBER ()
-> $$ = nterm expr ()
Stack now 0
Entering state 3
Reading a token: Next token is token '+' ()
Shifting token '+' ()
Entering state 5
Reading a token: Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 1
Reducing stack by rule 2 (line 31):
   $1 = token NUMBER ()
-> $$ = nterm expr ()
Stack now 0 3 5
Entering state 10
Reading a token: Next token is token '\n' ()
LAC: initial context established for '\n'
LAC: checking lookahead '\n': R3 G3 S9
Reducing stack by rule 3 (line 32):
   $1 = nterm expr ()
   $2 = token '+' ()
   $3 = nterm expr ()
-> $$ = nterm expr ()
Stack now 0
Entering state 3
Next token is token '\n' ()
Shifting token '\n' ()
LAC: initial context discarded due to shift
Entering state 9
Reducing stack by rule 1 (line 28):
   $1 = nterm expr ()
   $2 = token '\n' ()
-> $$ = nterm line ()
Stack now 0
Entering state 2
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 4
Stack now 0 2 4
Cleanup: popping token $end ()
Cleanup: popping nterm line ()
