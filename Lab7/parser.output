Grammar

    0 $accept: program $end

    1 program: stmtsequence

    2 stmtsequence: stmtsequence stmt
    3             | stmt

    4 stmt: ifstmt
    5     | repeatstmt
    6     | assignstmt
    7     | readstmt
    8     | writestmt

    9 ifstmt: IF expr THEN stmtsequence END
   10       | IF expr THEN stmtsequence ELSE stmtsequence END

   11 repeatstmt: REPEAT stmtsequence UNTIL expr

   12 assignstmt: ID ASSIGN expr SEMI

   13 readstmt: READ ID SEMI

   14 writestmt: WRITE expr SEMI

   15 expr: expr LT expr
   16     | expr EQ expr
   17     | expr PLUS expr
   18     | expr MINUS expr
   19     | expr TIMES expr
   20     | expr OVER expr
   21     | OP expr CP
   22     | NUMBER
   23     | ID


Terminals, with rules where they appear

$end (0) 0
error (256)
IF (258) 9 10
THEN (259) 9 10
ELSE (260) 10
END (261) 9 10
REPEAT (262) 11
UNTIL (263) 11
READ (264) 13
WRITE (265) 14
PLUS (266) 17
MINUS (267) 18
TIMES (268) 19
OVER (269) 20
EQ (270) 16
LT (271) 15
OP (272) 21
CP (273) 21
SEMI (274) 12 13 14
ASSIGN (275) 12
NUMBER (276) 22
ID (277) 12 13 23


Nonterminals, with rules where they appear

$accept (23)
    on left: 0
program (24)
    on left: 1, on right: 0
stmtsequence (25)
    on left: 2 3, on right: 1 2 9 10 11
stmt (26)
    on left: 4 5 6 7 8, on right: 2 3
ifstmt (27)
    on left: 9 10, on right: 4
repeatstmt (28)
    on left: 11, on right: 5
assignstmt (29)
    on left: 12, on right: 6
readstmt (30)
    on left: 13, on right: 7
writestmt (31)
    on left: 14, on right: 8
expr (32)
    on left: 15 16 17 18 19 20 21 22 23, on right: 9 10 11 12 14 15
    16 17 18 19 20 21


State 0

    0 $accept: . program $end

    IF      shift, and go to state 1
    REPEAT  shift, and go to state 2
    READ    shift, and go to state 3
    WRITE   shift, and go to state 4
    ID      shift, and go to state 5

    program       go to state 6
    stmtsequence  go to state 7
    stmt          go to state 8
    ifstmt        go to state 9
    repeatstmt    go to state 10
    assignstmt    go to state 11
    readstmt      go to state 12
    writestmt     go to state 13


State 1

    9 ifstmt: IF . expr THEN stmtsequence END
   10       | IF . expr THEN stmtsequence ELSE stmtsequence END

    OP      shift, and go to state 14
    NUMBER  shift, and go to state 15
    ID      shift, and go to state 16

    expr  go to state 17


State 2

   11 repeatstmt: REPEAT . stmtsequence UNTIL expr

    IF      shift, and go to state 1
    REPEAT  shift, and go to state 2
    READ    shift, and go to state 3
    WRITE   shift, and go to state 4
    ID      shift, and go to state 5

    stmtsequence  go to state 18
    stmt          go to state 8
    ifstmt        go to state 9
    repeatstmt    go to state 10
    assignstmt    go to state 11
    readstmt      go to state 12
    writestmt     go to state 13


State 3

   13 readstmt: READ . ID SEMI

    ID  shift, and go to state 19


State 4

   14 writestmt: WRITE . expr SEMI

    OP      shift, and go to state 14
    NUMBER  shift, and go to state 15
    ID      shift, and go to state 16

    expr  go to state 20


State 5

   12 assignstmt: ID . ASSIGN expr SEMI

    ASSIGN  shift, and go to state 21


State 6

    0 $accept: program . $end

    $end  shift, and go to state 22


State 7

    1 program: stmtsequence .
    2 stmtsequence: stmtsequence . stmt

    IF      shift, and go to state 1
    REPEAT  shift, and go to state 2
    READ    shift, and go to state 3
    WRITE   shift, and go to state 4
    ID      shift, and go to state 5

    $default  reduce using rule 1 (program)

    stmt        go to state 23
    ifstmt      go to state 9
    repeatstmt  go to state 10
    assignstmt  go to state 11
    readstmt    go to state 12
    writestmt   go to state 13


State 8

    3 stmtsequence: stmt .

    $default  reduce using rule 3 (stmtsequence)


State 9

    4 stmt: ifstmt .

    $default  reduce using rule 4 (stmt)


State 10

    5 stmt: repeatstmt .

    $default  reduce using rule 5 (stmt)


State 11

    6 stmt: assignstmt .

    $default  reduce using rule 6 (stmt)


State 12

    7 stmt: readstmt .

    $default  reduce using rule 7 (stmt)


State 13

    8 stmt: writestmt .

    $default  reduce using rule 8 (stmt)


State 14

   21 expr: OP . expr CP

    OP      shift, and go to state 14
    NUMBER  shift, and go to state 15
    ID      shift, and go to state 16

    expr  go to state 24


State 15

   22 expr: NUMBER .

    $default  reduce using rule 22 (expr)


State 16

   23 expr: ID .

    $default  reduce using rule 23 (expr)


State 17

    9 ifstmt: IF expr . THEN stmtsequence END
   10       | IF expr . THEN stmtsequence ELSE stmtsequence END
   15 expr: expr . LT expr
   16     | expr . EQ expr
   17     | expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . TIMES expr
   20     | expr . OVER expr

    THEN   shift, and go to state 25
    PLUS   shift, and go to state 26
    MINUS  shift, and go to state 27
    TIMES  shift, and go to state 28
    OVER   shift, and go to state 29
    EQ     shift, and go to state 30
    LT     shift, and go to state 31


State 18

    2 stmtsequence: stmtsequence . stmt
   11 repeatstmt: REPEAT stmtsequence . UNTIL expr

    IF      shift, and go to state 1
    REPEAT  shift, and go to state 2
    UNTIL   shift, and go to state 32
    READ    shift, and go to state 3
    WRITE   shift, and go to state 4
    ID      shift, and go to state 5

    stmt        go to state 23
    ifstmt      go to state 9
    repeatstmt  go to state 10
    assignstmt  go to state 11
    readstmt    go to state 12
    writestmt   go to state 13


State 19

   13 readstmt: READ ID . SEMI

    SEMI  shift, and go to state 33


State 20

   14 writestmt: WRITE expr . SEMI
   15 expr: expr . LT expr
   16     | expr . EQ expr
   17     | expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . TIMES expr
   20     | expr . OVER expr

    PLUS   shift, and go to state 26
    MINUS  shift, and go to state 27
    TIMES  shift, and go to state 28
    OVER   shift, and go to state 29
    EQ     shift, and go to state 30
    LT     shift, and go to state 31
    SEMI   shift, and go to state 34


State 21

   12 assignstmt: ID ASSIGN . expr SEMI

    OP      shift, and go to state 14
    NUMBER  shift, and go to state 15
    ID      shift, and go to state 16

    expr  go to state 35


State 22

    0 $accept: program $end .

    $default  accept


State 23

    2 stmtsequence: stmtsequence stmt .

    $default  reduce using rule 2 (stmtsequence)


State 24

   15 expr: expr . LT expr
   16     | expr . EQ expr
   17     | expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . TIMES expr
   20     | expr . OVER expr
   21     | OP expr . CP

    PLUS   shift, and go to state 26
    MINUS  shift, and go to state 27
    TIMES  shift, and go to state 28
    OVER   shift, and go to state 29
    EQ     shift, and go to state 30
    LT     shift, and go to state 31
    CP     shift, and go to state 36


State 25

    9 ifstmt: IF expr THEN . stmtsequence END
   10       | IF expr THEN . stmtsequence ELSE stmtsequence END

    IF      shift, and go to state 1
    REPEAT  shift, and go to state 2
    READ    shift, and go to state 3
    WRITE   shift, and go to state 4
    ID      shift, and go to state 5

    stmtsequence  go to state 37
    stmt          go to state 8
    ifstmt        go to state 9
    repeatstmt    go to state 10
    assignstmt    go to state 11
    readstmt      go to state 12
    writestmt     go to state 13


State 26

   17 expr: expr PLUS . expr

    OP      shift, and go to state 14
    NUMBER  shift, and go to state 15
    ID      shift, and go to state 16

    expr  go to state 38


State 27

   18 expr: expr MINUS . expr

    OP      shift, and go to state 14
    NUMBER  shift, and go to state 15
    ID      shift, and go to state 16

    expr  go to state 39


State 28

   19 expr: expr TIMES . expr

    OP      shift, and go to state 14
    NUMBER  shift, and go to state 15
    ID      shift, and go to state 16

    expr  go to state 40


State 29

   20 expr: expr OVER . expr

    OP      shift, and go to state 14
    NUMBER  shift, and go to state 15
    ID      shift, and go to state 16

    expr  go to state 41


State 30

   16 expr: expr EQ . expr

    OP      shift, and go to state 14
    NUMBER  shift, and go to state 15
    ID      shift, and go to state 16

    expr  go to state 42


State 31

   15 expr: expr LT . expr

    OP      shift, and go to state 14
    NUMBER  shift, and go to state 15
    ID      shift, and go to state 16

    expr  go to state 43


State 32

   11 repeatstmt: REPEAT stmtsequence UNTIL . expr

    OP      shift, and go to state 14
    NUMBER  shift, and go to state 15
    ID      shift, and go to state 16

    expr  go to state 44


State 33

   13 readstmt: READ ID SEMI .

    $default  reduce using rule 13 (readstmt)


State 34

   14 writestmt: WRITE expr SEMI .

    $default  reduce using rule 14 (writestmt)


State 35

   12 assignstmt: ID ASSIGN expr . SEMI
   15 expr: expr . LT expr
   16     | expr . EQ expr
   17     | expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . TIMES expr
   20     | expr . OVER expr

    PLUS   shift, and go to state 26
    MINUS  shift, and go to state 27
    TIMES  shift, and go to state 28
    OVER   shift, and go to state 29
    EQ     shift, and go to state 30
    LT     shift, and go to state 31
    SEMI   shift, and go to state 45


State 36

   21 expr: OP expr CP .

    $default  reduce using rule 21 (expr)


State 37

    2 stmtsequence: stmtsequence . stmt
    9 ifstmt: IF expr THEN stmtsequence . END
   10       | IF expr THEN stmtsequence . ELSE stmtsequence END

    IF      shift, and go to state 1
    ELSE    shift, and go to state 46
    END     shift, and go to state 47
    REPEAT  shift, and go to state 2
    READ    shift, and go to state 3
    WRITE   shift, and go to state 4
    ID      shift, and go to state 5

    stmt        go to state 23
    ifstmt      go to state 9
    repeatstmt  go to state 10
    assignstmt  go to state 11
    readstmt    go to state 12
    writestmt   go to state 13


State 38

   15 expr: expr . LT expr
   16     | expr . EQ expr
   17     | expr . PLUS expr
   17     | expr PLUS expr .
   18     | expr . MINUS expr
   19     | expr . TIMES expr
   20     | expr . OVER expr

    TIMES  shift, and go to state 28
    OVER   shift, and go to state 29

    $default  reduce using rule 17 (expr)


State 39

   15 expr: expr . LT expr
   16     | expr . EQ expr
   17     | expr . PLUS expr
   18     | expr . MINUS expr
   18     | expr MINUS expr .
   19     | expr . TIMES expr
   20     | expr . OVER expr

    TIMES  shift, and go to state 28
    OVER   shift, and go to state 29

    $default  reduce using rule 18 (expr)


State 40

   15 expr: expr . LT expr
   16     | expr . EQ expr
   17     | expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . TIMES expr
   19     | expr TIMES expr .
   20     | expr . OVER expr

    $default  reduce using rule 19 (expr)


State 41

   15 expr: expr . LT expr
   16     | expr . EQ expr
   17     | expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . TIMES expr
   20     | expr . OVER expr
   20     | expr OVER expr .

    $default  reduce using rule 20 (expr)


State 42

   15 expr: expr . LT expr
   16     | expr . EQ expr
   16     | expr EQ expr .
   17     | expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . TIMES expr
   20     | expr . OVER expr

    PLUS   shift, and go to state 26
    MINUS  shift, and go to state 27
    TIMES  shift, and go to state 28
    OVER   shift, and go to state 29

    $default  reduce using rule 16 (expr)


State 43

   15 expr: expr . LT expr
   15     | expr LT expr .
   16     | expr . EQ expr
   17     | expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . TIMES expr
   20     | expr . OVER expr

    PLUS   shift, and go to state 26
    MINUS  shift, and go to state 27
    TIMES  shift, and go to state 28
    OVER   shift, and go to state 29

    $default  reduce using rule 15 (expr)


State 44

   11 repeatstmt: REPEAT stmtsequence UNTIL expr .
   15 expr: expr . LT expr
   16     | expr . EQ expr
   17     | expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . TIMES expr
   20     | expr . OVER expr

    PLUS   shift, and go to state 26
    MINUS  shift, and go to state 27
    TIMES  shift, and go to state 28
    OVER   shift, and go to state 29
    EQ     shift, and go to state 30
    LT     shift, and go to state 31

    $default  reduce using rule 11 (repeatstmt)


State 45

   12 assignstmt: ID ASSIGN expr SEMI .

    $default  reduce using rule 12 (assignstmt)


State 46

   10 ifstmt: IF expr THEN stmtsequence ELSE . stmtsequence END

    IF      shift, and go to state 1
    REPEAT  shift, and go to state 2
    READ    shift, and go to state 3
    WRITE   shift, and go to state 4
    ID      shift, and go to state 5

    stmtsequence  go to state 48
    stmt          go to state 8
    ifstmt        go to state 9
    repeatstmt    go to state 10
    assignstmt    go to state 11
    readstmt      go to state 12
    writestmt     go to state 13


State 47

    9 ifstmt: IF expr THEN stmtsequence END .

    $default  reduce using rule 9 (ifstmt)


State 48

    2 stmtsequence: stmtsequence . stmt
   10 ifstmt: IF expr THEN stmtsequence ELSE stmtsequence . END

    IF      shift, and go to state 1
    END     shift, and go to state 49
    REPEAT  shift, and go to state 2
    READ    shift, and go to state 3
    WRITE   shift, and go to state 4
    ID      shift, and go to state 5

    stmt        go to state 23
    ifstmt      go to state 9
    repeatstmt  go to state 10
    assignstmt  go to state 11
    readstmt    go to state 12
    writestmt   go to state 13


State 49

   10 ifstmt: IF expr THEN stmtsequence ELSE stmtsequence END .

    $default  reduce using rule 10 (ifstmt)
