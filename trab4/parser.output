Grammar

    0 $accept: program $end

    1 program: funcdecllist

    2 funcdecllist: funcdecllist funcdecl
    3             | funcdecl

    4 funcdecl: funcheader funcbody

    5 $@1: %empty

    6 $@2: %empty

    7 funcheader: rettype ID $@1 LPAREN $@2 params RPAREN

    8 funcbody: LBRACE optvardecl optstmtlist RBRACE

    9 optvardecl: %empty
   10           | vardecllist

   11 optstmtlist: %empty
   12            | stmtlist

   13 rettype: INT
   14        | VOID

   15 params: VOID
   16       | paramlist

   17 paramlist: paramlist COMMA param
   18          | param

   19 param: INT ID
   20      | INT ID LBRACK RBRACK

   21 vardecllist: vardecllist vardecl
   22            | vardecl

   23 $@3: %empty

   24 vardecl: INT ID $@3 SEMI

   25 $@4: %empty

   26 vardecl: INT ID $@4 LBRACK NUM RBRACK SEMI

   27 stmtlist: stmtlist stmt
   28         | stmt

   29 stmt: assignstmt
   30     | ifstmt
   31     | whilestmt
   32     | returnstmt
   33     | funccall SEMI

   34 assignstmt: lval ASSIGN arithexpr SEMI

   35 lval: ID

   36 $@5: %empty

   37 lval: ID LBRACK $@5 NUM RBRACK

   38 $@6: %empty

   39 $@7: %empty

   40 lval: ID LBRACK $@6 ID $@7 RBRACK

   41 ifstmt: IF LPAREN boolexpr RPAREN block
   42       | IF LPAREN boolexpr RPAREN block ELSE block

   43 $@8: %empty

   44 $@9: %empty

   45 block: LBRACE $@8 optstmtlist $@9 RBRACE

   46 whilestmt: WHILE LPAREN boolexpr RPAREN block

   47 returnstmt: RETURN SEMI
   48           | RETURN arithexpr SEMI

   49 funccall: outputcall
   50         | writecall
   51         | userfunccall

   52 inputcall: INPUT LPAREN RPAREN

   53 outputcall: OUTPUT LPAREN arithexpr RPAREN

   54 writecall: WRITE LPAREN STRING RPAREN

   55 $@10: %empty

   56 userfunccall: ID $@10 LPAREN optarglist RPAREN

   57 optarglist: %empty
   58           | arglist

   59 arglist: arglist COMMA arithexpr
   60        | arithexpr

   61 boolexpr: arithexpr boolop arithexpr

   62 boolop: LT
   63       | LE
   64       | GT
   65       | GE
   66       | EQ
   67       | NEQ

   68 arithexpr: arithexpr PLUS arithexpr
   69          | arithexpr MINUS arithexpr
   70          | arithexpr TIMES arithexpr
   71          | arithexpr OVER arithexpr
   72          | LPAREN arithexpr RPAREN
   73          | lval
   74          | inputcall
   75          | userfunccall
   76          | NUM


Terminals, with rules where they appear

$end (0) 0
error (256)
INT (258) 13 19 20 24 26
VOID (259) 14 15
IF (260) 41 42
ELSE (261) 42
INPUT (262) 52
OUTPUT (263) 53
RETURN (264) 47 48
WHILE (265) 46
WRITE (266) 54
PLUS (267) 68
MINUS (268) 69
TIMES (269) 70
OVER (270) 71
LT (271) 62
LE (272) 63
GT (273) 64
GE (274) 65
EQ (275) 66
NEQ (276) 67
ASSIGN (277) 34
SEMI (278) 24 26 33 34 47 48
COMMA (279) 17 59
LPAREN (280) 7 41 42 46 52 53 54 56 72
RPAREN (281) 7 41 42 46 52 53 54 56 72
LBRACK (282) 20 26 37 40
RBRACK (283) 20 26 37 40
LBRACE (284) 8 45
RBRACE (285) 8 45
NUM (286) 26 37 76
ID (287) 7 19 20 24 26 35 37 40 56
STRING (288) 54


Nonterminals, with rules where they appear

$accept (34)
    on left: 0
program (35)
    on left: 1, on right: 0
funcdecllist (36)
    on left: 2 3, on right: 1 2
funcdecl (37)
    on left: 4, on right: 2 3
funcheader (38)
    on left: 7, on right: 4
$@1 (39)
    on left: 5, on right: 7
$@2 (40)
    on left: 6, on right: 7
funcbody (41)
    on left: 8, on right: 4
optvardecl (42)
    on left: 9 10, on right: 8
optstmtlist (43)
    on left: 11 12, on right: 8 45
rettype (44)
    on left: 13 14, on right: 7
params (45)
    on left: 15 16, on right: 7
paramlist (46)
    on left: 17 18, on right: 16 17
param (47)
    on left: 19 20, on right: 17 18
vardecllist (48)
    on left: 21 22, on right: 10 21
vardecl (49)
    on left: 24 26, on right: 21 22
$@3 (50)
    on left: 23, on right: 24
$@4 (51)
    on left: 25, on right: 26
stmtlist (52)
    on left: 27 28, on right: 12 27
stmt (53)
    on left: 29 30 31 32 33, on right: 27 28
assignstmt (54)
    on left: 34, on right: 29
lval (55)
    on left: 35 37 40, on right: 34 73
$@5 (56)
    on left: 36, on right: 37
$@6 (57)
    on left: 38, on right: 40
$@7 (58)
    on left: 39, on right: 40
ifstmt (59)
    on left: 41 42, on right: 30
block (60)
    on left: 45, on right: 41 42 46
$@8 (61)
    on left: 43, on right: 45
$@9 (62)
    on left: 44, on right: 45
whilestmt (63)
    on left: 46, on right: 31
returnstmt (64)
    on left: 47 48, on right: 32
funccall (65)
    on left: 49 50 51, on right: 33
inputcall (66)
    on left: 52, on right: 74
outputcall (67)
    on left: 53, on right: 49
writecall (68)
    on left: 54, on right: 50
userfunccall (69)
    on left: 56, on right: 51 75
$@10 (70)
    on left: 55, on right: 56
optarglist (71)
    on left: 57 58, on right: 56
arglist (72)
    on left: 59 60, on right: 58 59
boolexpr (73)
    on left: 61, on right: 41 42 46
boolop (74)
    on left: 62 63 64 65 66 67, on right: 61
arithexpr (75)
    on left: 68 69 70 71 72 73 74 75 76, on right: 34 48 53 59 60 61
    68 69 70 71 72


State 0

    0 $accept: . program $end

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    program       go to state 3
    funcdecllist  go to state 4
    funcdecl      go to state 5
    funcheader    go to state 6
    rettype       go to state 7


State 1

   13 rettype: INT .

    $default  reduce using rule 13 (rettype)


State 2

   14 rettype: VOID .

    $default  reduce using rule 14 (rettype)


State 3

    0 $accept: program . $end

    $end  shift, and go to state 8


State 4

    1 program: funcdecllist .
    2 funcdecllist: funcdecllist . funcdecl

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    $default  reduce using rule 1 (program)

    funcdecl    go to state 9
    funcheader  go to state 6
    rettype     go to state 7


State 5

    3 funcdecllist: funcdecl .

    $default  reduce using rule 3 (funcdecllist)


State 6

    4 funcdecl: funcheader . funcbody

    LBRACE  shift, and go to state 10

    funcbody  go to state 11


State 7

    7 funcheader: rettype . ID $@1 LPAREN $@2 params RPAREN

    ID  shift, and go to state 12


State 8

    0 $accept: program $end .

    $default  accept


State 9

    2 funcdecllist: funcdecllist funcdecl .

    $default  reduce using rule 2 (funcdecllist)


State 10

    8 funcbody: LBRACE . optvardecl optstmtlist RBRACE

    INT  shift, and go to state 13

    $default  reduce using rule 9 (optvardecl)

    optvardecl   go to state 14
    vardecllist  go to state 15
    vardecl      go to state 16


State 11

    4 funcdecl: funcheader funcbody .

    $default  reduce using rule 4 (funcdecl)


State 12

    7 funcheader: rettype ID . $@1 LPAREN $@2 params RPAREN

    $default  reduce using rule 5 ($@1)

    $@1  go to state 17


State 13

   24 vardecl: INT . ID $@3 SEMI
   26        | INT . ID $@4 LBRACK NUM RBRACK SEMI

    ID  shift, and go to state 18


State 14

    8 funcbody: LBRACE optvardecl . optstmtlist RBRACE

    IF      shift, and go to state 19
    OUTPUT  shift, and go to state 20
    RETURN  shift, and go to state 21
    WHILE   shift, and go to state 22
    WRITE   shift, and go to state 23
    ID      shift, and go to state 24

    $default  reduce using rule 11 (optstmtlist)

    optstmtlist   go to state 25
    stmtlist      go to state 26
    stmt          go to state 27
    assignstmt    go to state 28
    lval          go to state 29
    ifstmt        go to state 30
    whilestmt     go to state 31
    returnstmt    go to state 32
    funccall      go to state 33
    outputcall    go to state 34
    writecall     go to state 35
    userfunccall  go to state 36


State 15

   10 optvardecl: vardecllist .
   21 vardecllist: vardecllist . vardecl

    INT  shift, and go to state 13

    $default  reduce using rule 10 (optvardecl)

    vardecl  go to state 37


State 16

   22 vardecllist: vardecl .

    $default  reduce using rule 22 (vardecllist)


State 17

    7 funcheader: rettype ID $@1 . LPAREN $@2 params RPAREN

    LPAREN  shift, and go to state 38


State 18

   24 vardecl: INT ID . $@3 SEMI
   26        | INT ID . $@4 LBRACK NUM RBRACK SEMI

    LBRACK    reduce using rule 25 ($@4)
    $default  reduce using rule 23 ($@3)

    $@3  go to state 39
    $@4  go to state 40


State 19

   41 ifstmt: IF . LPAREN boolexpr RPAREN block
   42       | IF . LPAREN boolexpr RPAREN block ELSE block

    LPAREN  shift, and go to state 41


State 20

   53 outputcall: OUTPUT . LPAREN arithexpr RPAREN

    LPAREN  shift, and go to state 42


State 21

   47 returnstmt: RETURN . SEMI
   48           | RETURN . arithexpr SEMI

    INPUT   shift, and go to state 43
    SEMI    shift, and go to state 44
    LPAREN  shift, and go to state 45
    NUM     shift, and go to state 46
    ID      shift, and go to state 24

    lval          go to state 47
    inputcall     go to state 48
    userfunccall  go to state 49
    arithexpr     go to state 50


State 22

   46 whilestmt: WHILE . LPAREN boolexpr RPAREN block

    LPAREN  shift, and go to state 51


State 23

   54 writecall: WRITE . LPAREN STRING RPAREN

    LPAREN  shift, and go to state 52


State 24

   35 lval: ID .
   37     | ID . LBRACK $@5 NUM RBRACK
   40     | ID . LBRACK $@6 ID $@7 RBRACK
   56 userfunccall: ID . $@10 LPAREN optarglist RPAREN

    LBRACK  shift, and go to state 53

    LPAREN    reduce using rule 55 ($@10)
    $default  reduce using rule 35 (lval)

    $@10  go to state 54


State 25

    8 funcbody: LBRACE optvardecl optstmtlist . RBRACE

    RBRACE  shift, and go to state 55


State 26

   12 optstmtlist: stmtlist .
   27 stmtlist: stmtlist . stmt

    IF      shift, and go to state 19
    OUTPUT  shift, and go to state 20
    RETURN  shift, and go to state 21
    WHILE   shift, and go to state 22
    WRITE   shift, and go to state 23
    ID      shift, and go to state 24

    $default  reduce using rule 12 (optstmtlist)

    stmt          go to state 56
    assignstmt    go to state 28
    lval          go to state 29
    ifstmt        go to state 30
    whilestmt     go to state 31
    returnstmt    go to state 32
    funccall      go to state 33
    outputcall    go to state 34
    writecall     go to state 35
    userfunccall  go to state 36


State 27

   28 stmtlist: stmt .

    $default  reduce using rule 28 (stmtlist)


State 28

   29 stmt: assignstmt .

    $default  reduce using rule 29 (stmt)


State 29

   34 assignstmt: lval . ASSIGN arithexpr SEMI

    ASSIGN  shift, and go to state 57


State 30

   30 stmt: ifstmt .

    $default  reduce using rule 30 (stmt)


State 31

   31 stmt: whilestmt .

    $default  reduce using rule 31 (stmt)


State 32

   32 stmt: returnstmt .

    $default  reduce using rule 32 (stmt)


State 33

   33 stmt: funccall . SEMI

    SEMI  shift, and go to state 58


State 34

   49 funccall: outputcall .

    $default  reduce using rule 49 (funccall)


State 35

   50 funccall: writecall .

    $default  reduce using rule 50 (funccall)


State 36

   51 funccall: userfunccall .

    $default  reduce using rule 51 (funccall)


State 37

   21 vardecllist: vardecllist vardecl .

    $default  reduce using rule 21 (vardecllist)


State 38

    7 funcheader: rettype ID $@1 LPAREN . $@2 params RPAREN

    $default  reduce using rule 6 ($@2)

    $@2  go to state 59


State 39

   24 vardecl: INT ID $@3 . SEMI

    SEMI  shift, and go to state 60


State 40

   26 vardecl: INT ID $@4 . LBRACK NUM RBRACK SEMI

    LBRACK  shift, and go to state 61


State 41

   41 ifstmt: IF LPAREN . boolexpr RPAREN block
   42       | IF LPAREN . boolexpr RPAREN block ELSE block

    INPUT   shift, and go to state 43
    LPAREN  shift, and go to state 45
    NUM     shift, and go to state 46
    ID      shift, and go to state 24

    lval          go to state 47
    inputcall     go to state 48
    userfunccall  go to state 49
    boolexpr      go to state 62
    arithexpr     go to state 63


State 42

   53 outputcall: OUTPUT LPAREN . arithexpr RPAREN

    INPUT   shift, and go to state 43
    LPAREN  shift, and go to state 45
    NUM     shift, and go to state 46
    ID      shift, and go to state 24

    lval          go to state 47
    inputcall     go to state 48
    userfunccall  go to state 49
    arithexpr     go to state 64


State 43

   52 inputcall: INPUT . LPAREN RPAREN

    LPAREN  shift, and go to state 65


State 44

   47 returnstmt: RETURN SEMI .

    $default  reduce using rule 47 (returnstmt)


State 45

   72 arithexpr: LPAREN . arithexpr RPAREN

    INPUT   shift, and go to state 43
    LPAREN  shift, and go to state 45
    NUM     shift, and go to state 46
    ID      shift, and go to state 24

    lval          go to state 47
    inputcall     go to state 48
    userfunccall  go to state 49
    arithexpr     go to state 66


State 46

   76 arithexpr: NUM .

    $default  reduce using rule 76 (arithexpr)


State 47

   73 arithexpr: lval .

    $default  reduce using rule 73 (arithexpr)


State 48

   74 arithexpr: inputcall .

    $default  reduce using rule 74 (arithexpr)


State 49

   75 arithexpr: userfunccall .

    $default  reduce using rule 75 (arithexpr)


State 50

   48 returnstmt: RETURN arithexpr . SEMI
   68 arithexpr: arithexpr . PLUS arithexpr
   69          | arithexpr . MINUS arithexpr
   70          | arithexpr . TIMES arithexpr
   71          | arithexpr . OVER arithexpr

    PLUS   shift, and go to state 67
    MINUS  shift, and go to state 68
    TIMES  shift, and go to state 69
    OVER   shift, and go to state 70
    SEMI   shift, and go to state 71


State 51

   46 whilestmt: WHILE LPAREN . boolexpr RPAREN block

    INPUT   shift, and go to state 43
    LPAREN  shift, and go to state 45
    NUM     shift, and go to state 46
    ID      shift, and go to state 24

    lval          go to state 47
    inputcall     go to state 48
    userfunccall  go to state 49
    boolexpr      go to state 72
    arithexpr     go to state 63


State 52

   54 writecall: WRITE LPAREN . STRING RPAREN

    STRING  shift, and go to state 73


State 53

   37 lval: ID LBRACK . $@5 NUM RBRACK
   40     | ID LBRACK . $@6 ID $@7 RBRACK

    ID        reduce using rule 38 ($@6)
    $default  reduce using rule 36 ($@5)

    $@5  go to state 74
    $@6  go to state 75


State 54

   56 userfunccall: ID $@10 . LPAREN optarglist RPAREN

    LPAREN  shift, and go to state 76


State 55

    8 funcbody: LBRACE optvardecl optstmtlist RBRACE .

    $default  reduce using rule 8 (funcbody)


State 56

   27 stmtlist: stmtlist stmt .

    $default  reduce using rule 27 (stmtlist)


State 57

   34 assignstmt: lval ASSIGN . arithexpr SEMI

    INPUT   shift, and go to state 43
    LPAREN  shift, and go to state 45
    NUM     shift, and go to state 46
    ID      shift, and go to state 24

    lval          go to state 47
    inputcall     go to state 48
    userfunccall  go to state 49
    arithexpr     go to state 77


State 58

   33 stmt: funccall SEMI .

    $default  reduce using rule 33 (stmt)


State 59

    7 funcheader: rettype ID $@1 LPAREN $@2 . params RPAREN

    INT   shift, and go to state 78
    VOID  shift, and go to state 79

    params     go to state 80
    paramlist  go to state 81
    param      go to state 82


State 60

   24 vardecl: INT ID $@3 SEMI .

    $default  reduce using rule 24 (vardecl)


State 61

   26 vardecl: INT ID $@4 LBRACK . NUM RBRACK SEMI

    NUM  shift, and go to state 83


State 62

   41 ifstmt: IF LPAREN boolexpr . RPAREN block
   42       | IF LPAREN boolexpr . RPAREN block ELSE block

    RPAREN  shift, and go to state 84


State 63

   61 boolexpr: arithexpr . boolop arithexpr
   68 arithexpr: arithexpr . PLUS arithexpr
   69          | arithexpr . MINUS arithexpr
   70          | arithexpr . TIMES arithexpr
   71          | arithexpr . OVER arithexpr

    PLUS   shift, and go to state 67
    MINUS  shift, and go to state 68
    TIMES  shift, and go to state 69
    OVER   shift, and go to state 70
    LT     shift, and go to state 85
    LE     shift, and go to state 86
    GT     shift, and go to state 87
    GE     shift, and go to state 88
    EQ     shift, and go to state 89
    NEQ    shift, and go to state 90

    boolop  go to state 91


State 64

   53 outputcall: OUTPUT LPAREN arithexpr . RPAREN
   68 arithexpr: arithexpr . PLUS arithexpr
   69          | arithexpr . MINUS arithexpr
   70          | arithexpr . TIMES arithexpr
   71          | arithexpr . OVER arithexpr

    PLUS    shift, and go to state 67
    MINUS   shift, and go to state 68
    TIMES   shift, and go to state 69
    OVER    shift, and go to state 70
    RPAREN  shift, and go to state 92


State 65

   52 inputcall: INPUT LPAREN . RPAREN

    RPAREN  shift, and go to state 93


State 66

   68 arithexpr: arithexpr . PLUS arithexpr
   69          | arithexpr . MINUS arithexpr
   70          | arithexpr . TIMES arithexpr
   71          | arithexpr . OVER arithexpr
   72          | LPAREN arithexpr . RPAREN

    PLUS    shift, and go to state 67
    MINUS   shift, and go to state 68
    TIMES   shift, and go to state 69
    OVER    shift, and go to state 70
    RPAREN  shift, and go to state 94


State 67

   68 arithexpr: arithexpr PLUS . arithexpr

    INPUT   shift, and go to state 43
    LPAREN  shift, and go to state 45
    NUM     shift, and go to state 46
    ID      shift, and go to state 24

    lval          go to state 47
    inputcall     go to state 48
    userfunccall  go to state 49
    arithexpr     go to state 95


State 68

   69 arithexpr: arithexpr MINUS . arithexpr

    INPUT   shift, and go to state 43
    LPAREN  shift, and go to state 45
    NUM     shift, and go to state 46
    ID      shift, and go to state 24

    lval          go to state 47
    inputcall     go to state 48
    userfunccall  go to state 49
    arithexpr     go to state 96


State 69

   70 arithexpr: arithexpr TIMES . arithexpr

    INPUT   shift, and go to state 43
    LPAREN  shift, and go to state 45
    NUM     shift, and go to state 46
    ID      shift, and go to state 24

    lval          go to state 47
    inputcall     go to state 48
    userfunccall  go to state 49
    arithexpr     go to state 97


State 70

   71 arithexpr: arithexpr OVER . arithexpr

    INPUT   shift, and go to state 43
    LPAREN  shift, and go to state 45
    NUM     shift, and go to state 46
    ID      shift, and go to state 24

    lval          go to state 47
    inputcall     go to state 48
    userfunccall  go to state 49
    arithexpr     go to state 98


State 71

   48 returnstmt: RETURN arithexpr SEMI .

    $default  reduce using rule 48 (returnstmt)


State 72

   46 whilestmt: WHILE LPAREN boolexpr . RPAREN block

    RPAREN  shift, and go to state 99


State 73

   54 writecall: WRITE LPAREN STRING . RPAREN

    RPAREN  shift, and go to state 100


State 74

   37 lval: ID LBRACK $@5 . NUM RBRACK

    NUM  shift, and go to state 101


State 75

   40 lval: ID LBRACK $@6 . ID $@7 RBRACK

    ID  shift, and go to state 102


State 76

   56 userfunccall: ID $@10 LPAREN . optarglist RPAREN

    INPUT   shift, and go to state 43
    LPAREN  shift, and go to state 45
    NUM     shift, and go to state 46
    ID      shift, and go to state 24

    $default  reduce using rule 57 (optarglist)

    lval          go to state 47
    inputcall     go to state 48
    userfunccall  go to state 49
    optarglist    go to state 103
    arglist       go to state 104
    arithexpr     go to state 105


State 77

   34 assignstmt: lval ASSIGN arithexpr . SEMI
   68 arithexpr: arithexpr . PLUS arithexpr
   69          | arithexpr . MINUS arithexpr
   70          | arithexpr . TIMES arithexpr
   71          | arithexpr . OVER arithexpr

    PLUS   shift, and go to state 67
    MINUS  shift, and go to state 68
    TIMES  shift, and go to state 69
    OVER   shift, and go to state 70
    SEMI   shift, and go to state 106


State 78

   19 param: INT . ID
   20      | INT . ID LBRACK RBRACK

    ID  shift, and go to state 107


State 79

   15 params: VOID .

    $default  reduce using rule 15 (params)


State 80

    7 funcheader: rettype ID $@1 LPAREN $@2 params . RPAREN

    RPAREN  shift, and go to state 108


State 81

   16 params: paramlist .
   17 paramlist: paramlist . COMMA param

    COMMA  shift, and go to state 109

    $default  reduce using rule 16 (params)


State 82

   18 paramlist: param .

    $default  reduce using rule 18 (paramlist)


State 83

   26 vardecl: INT ID $@4 LBRACK NUM . RBRACK SEMI

    RBRACK  shift, and go to state 110


State 84

   41 ifstmt: IF LPAREN boolexpr RPAREN . block
   42       | IF LPAREN boolexpr RPAREN . block ELSE block

    LBRACE  shift, and go to state 111

    block  go to state 112


State 85

   62 boolop: LT .

    $default  reduce using rule 62 (boolop)


State 86

   63 boolop: LE .

    $default  reduce using rule 63 (boolop)


State 87

   64 boolop: GT .

    $default  reduce using rule 64 (boolop)


State 88

   65 boolop: GE .

    $default  reduce using rule 65 (boolop)


State 89

   66 boolop: EQ .

    $default  reduce using rule 66 (boolop)


State 90

   67 boolop: NEQ .

    $default  reduce using rule 67 (boolop)


State 91

   61 boolexpr: arithexpr boolop . arithexpr

    INPUT   shift, and go to state 43
    LPAREN  shift, and go to state 45
    NUM     shift, and go to state 46
    ID      shift, and go to state 24

    lval          go to state 47
    inputcall     go to state 48
    userfunccall  go to state 49
    arithexpr     go to state 113


State 92

   53 outputcall: OUTPUT LPAREN arithexpr RPAREN .

    $default  reduce using rule 53 (outputcall)


State 93

   52 inputcall: INPUT LPAREN RPAREN .

    $default  reduce using rule 52 (inputcall)


State 94

   72 arithexpr: LPAREN arithexpr RPAREN .

    $default  reduce using rule 72 (arithexpr)


State 95

   68 arithexpr: arithexpr . PLUS arithexpr
   68          | arithexpr PLUS arithexpr .
   69          | arithexpr . MINUS arithexpr
   70          | arithexpr . TIMES arithexpr
   71          | arithexpr . OVER arithexpr

    TIMES  shift, and go to state 69
    OVER   shift, and go to state 70

    $default  reduce using rule 68 (arithexpr)


State 96

   68 arithexpr: arithexpr . PLUS arithexpr
   69          | arithexpr . MINUS arithexpr
   69          | arithexpr MINUS arithexpr .
   70          | arithexpr . TIMES arithexpr
   71          | arithexpr . OVER arithexpr

    TIMES  shift, and go to state 69
    OVER   shift, and go to state 70

    $default  reduce using rule 69 (arithexpr)


State 97

   68 arithexpr: arithexpr . PLUS arithexpr
   69          | arithexpr . MINUS arithexpr
   70          | arithexpr . TIMES arithexpr
   70          | arithexpr TIMES arithexpr .
   71          | arithexpr . OVER arithexpr

    $default  reduce using rule 70 (arithexpr)


State 98

   68 arithexpr: arithexpr . PLUS arithexpr
   69          | arithexpr . MINUS arithexpr
   70          | arithexpr . TIMES arithexpr
   71          | arithexpr . OVER arithexpr
   71          | arithexpr OVER arithexpr .

    $default  reduce using rule 71 (arithexpr)


State 99

   46 whilestmt: WHILE LPAREN boolexpr RPAREN . block

    LBRACE  shift, and go to state 111

    block  go to state 114


State 100

   54 writecall: WRITE LPAREN STRING RPAREN .

    $default  reduce using rule 54 (writecall)


State 101

   37 lval: ID LBRACK $@5 NUM . RBRACK

    RBRACK  shift, and go to state 115


State 102

   40 lval: ID LBRACK $@6 ID . $@7 RBRACK

    $default  reduce using rule 39 ($@7)

    $@7  go to state 116


State 103

   56 userfunccall: ID $@10 LPAREN optarglist . RPAREN

    RPAREN  shift, and go to state 117


State 104

   58 optarglist: arglist .
   59 arglist: arglist . COMMA arithexpr

    COMMA  shift, and go to state 118

    $default  reduce using rule 58 (optarglist)


State 105

   60 arglist: arithexpr .
   68 arithexpr: arithexpr . PLUS arithexpr
   69          | arithexpr . MINUS arithexpr
   70          | arithexpr . TIMES arithexpr
   71          | arithexpr . OVER arithexpr

    PLUS   shift, and go to state 67
    MINUS  shift, and go to state 68
    TIMES  shift, and go to state 69
    OVER   shift, and go to state 70

    $default  reduce using rule 60 (arglist)


State 106

   34 assignstmt: lval ASSIGN arithexpr SEMI .

    $default  reduce using rule 34 (assignstmt)


State 107

   19 param: INT ID .
   20      | INT ID . LBRACK RBRACK

    LBRACK  shift, and go to state 119

    $default  reduce using rule 19 (param)


State 108

    7 funcheader: rettype ID $@1 LPAREN $@2 params RPAREN .

    $default  reduce using rule 7 (funcheader)


State 109

   17 paramlist: paramlist COMMA . param

    INT  shift, and go to state 78

    param  go to state 120


State 110

   26 vardecl: INT ID $@4 LBRACK NUM RBRACK . SEMI

    SEMI  shift, and go to state 121


State 111

   45 block: LBRACE . $@8 optstmtlist $@9 RBRACE

    $default  reduce using rule 43 ($@8)

    $@8  go to state 122


State 112

   41 ifstmt: IF LPAREN boolexpr RPAREN block .
   42       | IF LPAREN boolexpr RPAREN block . ELSE block

    ELSE  shift, and go to state 123

    $default  reduce using rule 41 (ifstmt)


State 113

   61 boolexpr: arithexpr boolop arithexpr .
   68 arithexpr: arithexpr . PLUS arithexpr
   69          | arithexpr . MINUS arithexpr
   70          | arithexpr . TIMES arithexpr
   71          | arithexpr . OVER arithexpr

    PLUS   shift, and go to state 67
    MINUS  shift, and go to state 68
    TIMES  shift, and go to state 69
    OVER   shift, and go to state 70

    $default  reduce using rule 61 (boolexpr)


State 114

   46 whilestmt: WHILE LPAREN boolexpr RPAREN block .

    $default  reduce using rule 46 (whilestmt)


State 115

   37 lval: ID LBRACK $@5 NUM RBRACK .

    $default  reduce using rule 37 (lval)


State 116

   40 lval: ID LBRACK $@6 ID $@7 . RBRACK

    RBRACK  shift, and go to state 124


State 117

   56 userfunccall: ID $@10 LPAREN optarglist RPAREN .

    $default  reduce using rule 56 (userfunccall)


State 118

   59 arglist: arglist COMMA . arithexpr

    INPUT   shift, and go to state 43
    LPAREN  shift, and go to state 45
    NUM     shift, and go to state 46
    ID      shift, and go to state 24

    lval          go to state 47
    inputcall     go to state 48
    userfunccall  go to state 49
    arithexpr     go to state 125


State 119

   20 param: INT ID LBRACK . RBRACK

    RBRACK  shift, and go to state 126


State 120

   17 paramlist: paramlist COMMA param .

    $default  reduce using rule 17 (paramlist)


State 121

   26 vardecl: INT ID $@4 LBRACK NUM RBRACK SEMI .

    $default  reduce using rule 26 (vardecl)


State 122

   45 block: LBRACE $@8 . optstmtlist $@9 RBRACE

    IF      shift, and go to state 19
    OUTPUT  shift, and go to state 20
    RETURN  shift, and go to state 21
    WHILE   shift, and go to state 22
    WRITE   shift, and go to state 23
    ID      shift, and go to state 24

    $default  reduce using rule 11 (optstmtlist)

    optstmtlist   go to state 127
    stmtlist      go to state 26
    stmt          go to state 27
    assignstmt    go to state 28
    lval          go to state 29
    ifstmt        go to state 30
    whilestmt     go to state 31
    returnstmt    go to state 32
    funccall      go to state 33
    outputcall    go to state 34
    writecall     go to state 35
    userfunccall  go to state 36


State 123

   42 ifstmt: IF LPAREN boolexpr RPAREN block ELSE . block

    LBRACE  shift, and go to state 111

    block  go to state 128


State 124

   40 lval: ID LBRACK $@6 ID $@7 RBRACK .

    $default  reduce using rule 40 (lval)


State 125

   59 arglist: arglist COMMA arithexpr .
   68 arithexpr: arithexpr . PLUS arithexpr
   69          | arithexpr . MINUS arithexpr
   70          | arithexpr . TIMES arithexpr
   71          | arithexpr . OVER arithexpr

    PLUS   shift, and go to state 67
    MINUS  shift, and go to state 68
    TIMES  shift, and go to state 69
    OVER   shift, and go to state 70

    $default  reduce using rule 59 (arglist)


State 126

   20 param: INT ID LBRACK RBRACK .

    $default  reduce using rule 20 (param)


State 127

   45 block: LBRACE $@8 optstmtlist . $@9 RBRACE

    $default  reduce using rule 44 ($@9)

    $@9  go to state 129


State 128

   42 ifstmt: IF LPAREN boolexpr RPAREN block ELSE block .

    $default  reduce using rule 42 (ifstmt)


State 129

   45 block: LBRACE $@8 optstmtlist $@9 . RBRACE

    RBRACE  shift, and go to state 130


State 130

   45 block: LBRACE $@8 optstmtlist $@9 RBRACE .

    $default  reduce using rule 45 (block)
